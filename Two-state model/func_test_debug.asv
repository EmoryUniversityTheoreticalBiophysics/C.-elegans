
 close all
 clear all
inputname = {'control_oct','control_nov','ibuprofen','mutant'};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Settings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% model 1
factor1 = @(I,I1) I1(1)+((I)./(1+(I/I1(2)))); 
factor1fit = @(I1a,I1b,x) I1a+((x)./(1+(x/I1b))); 

% % % % linear model 2
% factor1 = @(I,I1) I1(1)-(I1(2)*I); 
% factor1fit = @(I1a,I1b,x) I1a-(I1b*x); 

% % % linear model 1
% factor1 = @(I,I1) I1(1)+I; 
% factor1fit = @(I1a,x) I1a+x; 

pscale = 1;
timerange = [60 150];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% debugging
j = 1; 

%  Check the factor 1 bt maximizing prob
% for j = 1:4
    
%     Load data
    load(inputname{j})
    speed = speed(timerange(1):timerange(2),:);
    fspeed = fspeed(timerange(1):timerange(2),:);
    fspeed_go = fspeed(:,S==0);
    I_go = I(S==0);
    
   
% Calculate I1
    I1{j} = Func_fit(speed,I,S,factor1);
    Probval1(j) = Prob_cal(I1{j},I,speed,factor1);
    
    
%     Ploting the function
    figure(1)
    subplot(2,2,j)
    plot(linspace(0,200),-factor1(linspace(0,200),I1{j}))
    stdfac = std(-factor1(linspace(0,200),I1{j}));
    ylabel('factor value')
    xlabel('Laser power')
    hold
    plot(part_avgI,part_vmax,'O')
    title(inputname{j})
    
   
%   Plotting the collasped speed
    vdf = fspeed_go'./(factor1(I_go,I1{j})'*ones(size(fspeed_go,1),1)');
    for i=1:5
        part_vdf(i,:) = nanmean(vdf(part_indexgo(i,:),:),1);
    end
    figure(2)
    subplot(2,2,j)
    plot(part_vdf')
    ylabel('speed')
    xlabel('time')
    title(inputname{j})
    
    %   Plotting the collasped speed (equal range)
    diff = 200/5;
    for i=1:5
        part2_vdf(i,:) = nanmean(vdf((I_go>diff*(i-1) & I_go<diff*i),:),1);
    end
    figure(22)
    subplot(2,2,j)
    plot(part2_vdf')
    ylabel('speed')
    xlabel('time')
    title(inputname{j})
    
% end
% saveas(1,[pwd '\results_temp\func.png'])
% saveas(2,[pwd '\results_temp\collaspe.png'])


% 
%  Check factor 1 by fitting it on max return speed
% for j = 1:4
    load(inputname{j})
    speed = speed(timerange(1):timerange(2),:);
    fspeed = fspeed(timerange(1):timerange(2),:);
    fspeed_go = fspeed(:,S==0);
    I_go = I(S==0);
        
      %Fit anonymous function
    g = fittype(factor1fit);
    f1 = fit( I',vmax', g);
%     I1fit{j} = [f1.I1a];
    I1fit{j} = [f1.I1a f1.I1b];
%     I1fit{j} = [f1.I1a f1.I1b f1.I1c];
    Probval1(j) = Prob_cal(I1fit{j},I,speed,factor1);
    
    figure(3)
    subplot(2,2,j)
    plot(part_avgI,part_vmax,'O')
    hold
    plot(f1)
    ylim([-70 0])
    
    vdf = fspeed_go'./(factor1(I_go,I1fit{j})'*ones(size(fspeed_go,1),1)');
    for i=1:5
        part_vdf(i,:) = nanmean(vdf(part_indexgo(i,:),:),1);
    end
    figure(4)
    subplot(2,2,j)
    plot(part_vdf')
    ylabel('speed')
    xlabel('time')
    title(inputname{j})
% end
% saveas(3,[pwd '\results_temp\funcfit.png'])
% saveas(4,[pwd '\results_temp\collaspefit.png'])

% 
% 









% calculate the probability map of ecah data set using its I0 and I1
% for j = 1:4
    
    load(inputname{j})

    I_go = I(S==0);
    fspeed = fspeed(timerange(1):timerange(2),:);
    speed = speed(timerange(1):timerange(2),:);
    speed_go = speed(:,S==0);
    fspeed_go = fspeed(:,S==0);
    speed_p = speed(:,S==1);
    fspeed_p = fspeed(:,S==1);

    % Calculating prob of each worm
    speed_input = speed;
    speed_go_input = speed_go;
    I_go_input = I_go;
    speed_p_input = speed_p;
    
    I0(j) = Func_fitI0(I,S) ;
    
    p_all{j} = zeros(300,size(I,2));
    for i=1:size(I,2)
        p_all{j}(:,i) = probfunctest(speed_input(:,i),[1:300],I0(j),I1{j},speed_go_input,I_go_input,speed_p_input,factor1,pscale);
    end
    
    %%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%
    %%debug
    I1test =  [-5.5850    8.5623];
%   Ploting the function
    figure(11)
    plot(linspace(0,200),-factor1(linspace(0,200),I1test))
    stdfac = std(-factor1(linspace(0,200),I1test));
    ylabel('factor value')
    xlabel('Laser power')
    hold
    plot(part_avgI,part_vmax,'O')
    title(inputname{j})
    hold
    
    figure(12)
    plot(
    
    probfunctest(speed_input(:,i),I(i),I0,I1test,speed_go_input,I_go_input,speed_p_input,factor1,pscale);
    
    %%%
    %%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%
    
    %Calculating the max. probability
    [predIprob predI] = max(p_all{j});
    figure()
    plot3(I,predI,[1:length(I)],'*')
    view(2)
    ylim([0 350])
    xlabel('actual laser power')
    ylabel('predicted laser power')
    title(inputname{j})
    saveas(gca,[pwd '\results_temp\' inputname{j} '_pvsa.png'])
    
    %Plotting average prob in 5 bins with equal element in the same bin
    Npart = 5;
    diff = floor(length(I)/Npart);
    sortI = sort(I);
    Irng = sortI(floor(linspace(1,length(I),Npart+1))); 
    p_avg = zeros(Npart,300);
    for i=1:Npart
        p_avg(i,:) = nanmean(p_all{j}(:,part_index(i,:)),2);
    end

    figure()
    surf([p_avg ; zeros(1,300)])
    colormap(gray)
    shading flat 
    % caxis([0 0.01])
    xlabel('Predicted laser power')
    ylabel('Actual laser power')
    view(2)
    set(gca,'YTick',1:Npart)
    set(gca,'YTickLabel',part_avgI);
    colorbar
    title(inputname{j})
    saveas(gca,[pwd '\results_temp\' inputname{j} '_map.png'])
    
% end



% 
% % calculate the probability map of ecah data set using I0 and I1 from oct and nov data
% for j = 3:4
%     
%     load(inputname{j})
% 
%     I_go = I(S==0);
%     fspeed = fspeed(timerange(1):timerange(2),:);
%     speed = speed(timerange(1):timerange(2),:);
%     speed_go = speed(:,S==0);
%     fspeed_go = fspeed(:,S==0);
%     speed_p = speed(:,S==1);
%     fspeed_p = fspeed(:,S==1);
% 
%     % Calculating prob of each worm
%     speed_input = speed;
%     speed_go_input = speed_go;
%     I_go_input = I_go;
%     speed_p_input = speed_p;
%     
%     
%     
%     %%%%%%%%%%%%%%%%%%%%%%
% %   Oct model
%     %%%%%%%%%%%%%%%%%%%%%%
%     
%     p_alloct{j} = zeros(300,size(I,2));
%     for i=1:size(I,2)
%         p_alloct{j}(:,i) = probfunctest(speed_input(:,i),[1:300],I0(1),I1{1},speed_go_input,I_go_input,speed_p_input,factor1,pscale);
%     end
%     
%     %Calculating the max. probability
%     [predIprob predI] = max(p_alloct{j});
%     figure()
%     plot(I,predI,'*')
%     xlabel('actual laser power')
%     ylabel('predicted laser power')
%     title([inputname{j} ' (oct model)'])
%     ylim([0 350])
%     saveas(gca,[pwd '\results_temp\' inputname{j} '_pvsa_octmodel.png'])
%     
%     %Plotting average prob in 5 bins with equal element in the same bin
%     Npart = 5;
%     diff = floor(length(I)/Npart);
%     sortI = sort(I);
%     Irng = sortI(floor(linspace(1,length(I),Npart+1))); 
%     p_avg = zeros(Npart,300);
%     for i=1:Npart
%         p_avg(i,:) = nanmean(p_alloct{j}(:,part_index(i,:)),2);
%     end
% 
%     figure()
%     surf([p_avg ; zeros(1,300)])
%     colormap(gray)
%     shading flat 
%     % caxis([0 0.01])
%     xlabel('Predicted laser power')
%     ylabel('Actual laser power')
%     view(2)
%     set(gca,'YTick',1:Npart)
%     set(gca,'YTickLabel',part_avgI);
%     colorbar
%     title([inputname{j}  ' (oct model)'])
%     saveas(gca,[pwd '\results_temp\' inputname{j} '_map_octmodel.png'])
%     
%     %%%%%%%%%%%%%%%%%%%%%%
% %   Nov model
%     %%%%%%%%%%%%%%%%%%%%%%
%     
%     p_allnov{j} = zeros(300,size(I,2));
%     for i=1:size(I,2)
%         p_allnov{j}(:,i) = probfunctest(speed_input(:,i),[1:300],I0(2),I1{2},speed_go_input,I_go_input,speed_p_input,factor1,pscale);
%     end
%     
%     
%     %Calculating the max. probability
%     [predIprob predI] = max(p_allnov{j});
%     figure()
%     plot(I,predI,'*')
%     xlabel('actual laser power')
%     ylabel('predicted laser power')
%     title([inputname{j}  ' (nov model)'])
%     ylim([0 350])
%     saveas(gca,[pwd '\results_temp\' inputname{j} '_pvsa_novmodel.png'])
%     
%     %Plotting average prob in 5 bins with equal element in the same bin
%     Npart = 5;
%     diff = floor(length(I)/Npart);
%     sortI = sort(I);
%     Irng = sortI(floor(linspace(1,length(I),Npart+1))); 
%     p_avg = zeros(Npart,300);
%     for i=1:Npart
%         p_avg(i,:) = nanmean(p_allnov{j}(:,part_index(i,:)),2);
%     end
% 
%     figure()
%     surf([p_avg ; zeros(1,300)])
%     colormap(gray)
%     shading flat 
%     % caxis([0 0.01])
%     xlabel('Predicted laser power')
%     ylabel('Actual laser power')
%     view(2)
%     set(gca,'YTick',1:Npart)
%     set(gca,'YTickLabel',part_avgI);
%     colorbar
%     title([inputname{j}  ' (nov model)'])
%     saveas(gca,[pwd '\results_temp\' inputname{j} '_map_novmodel.png'])
% end

