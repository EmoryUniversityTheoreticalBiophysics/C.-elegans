library("R.matlab")
rm(list = ls())
setwd("D:/Ilya/Control_Data/Control_data_analysis/centroid_speed")
#filename = "control_data_CVel_linear"
#filename = "RANDOMPOWER_CTRLOctober2013_data_CVel_feature"
#filename = "RANDOMPOWER_CTRLOctober2013_data_combined")
filename = "Control_data_CVel_sigtrans"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
#mattest$I_ctrl and mattest$speedwlaser
#input
#names(mattest) : check content in mattest
#speed = mattest$combined
#speed = mattest$speed
speed = mattest$nfspeed
#speed = mattest$nfspeed.ctrl
# speed = mattest$speed
#speed[1:30,] = 0
I = t(mattest$I)
# #nonlinear map of I
# I <- rep(NA, length(mattest$fI))
# Imap =c(3.4718,74.1445,120.2700,133.8462,142.7821)
# for(i in 1:length(mattest$fI)) {
# 	if(mattest$fI[i]==10){I[i] = Imap[1]}
# 	if(mattest$fI[i]==30){I[i] = Imap[2]}
# 	if(mattest$fI[i]==60){I[i] = Imap[3]}
# 	if(mattest$fI[i]==100){I[i] = Imap[4]}
# 	if(mattest$fI[i]==150){I[i] = Imap[5]}
# }
###LASSO
#fit0= glmnet(t(speed), t(I))
#range
lambdafit1 = seq(log(2),log(1),length=50)
#lambdafit1 = seq(log(20),log(1),length=100)
lambdafit1 = exp(lambdafit1)
#fit1 = glmnet(t(speed), t(I),lambda=lambdafit1)
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
#fit2 = cv.glmnet(t(speed), t(I),lambda=lambdafit1)
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
#plot(fit2$nzero,r2cv)
#plot(fit1$beta[,50])
#plot(r2cv)
#plot(fit2$cvm)
###output Rsquare plots
windows()
plot(fit2$nzero,r2cv,col="red",xlab="no. of nonzero",ylab='Rsquare',ylim=c(0,1))
title('Rsquare')
xlab='Rsquare'
### find the maximum value of Rsquare
windows()
plot(fit1$beta[,which.max(r2cv)],xlab='time')
title(r2cv[which.max(r2cv)],  sub = fit2$nzero[which.max(r2cv)],
cex.sub = 0.75, font.sub = 3, col.sub = "red")
#Make speedion using predict.cv
predict_I = predict(fit2,newx=t(speed),s=fit2$lambda[70])
windows()
plot(predict_I,I)
#saving data
writeMat(paste(filename,"_LASSO",".mat",sep=""),r2cv=r2cv, LASSOresult=fit1$beta, nzero=fit1$df,a0 = fit1$a0,predict_I=predict_I, intput_I = I)
library("R.matlab")
rm(list = ls())
setwd("D:/Ilya/Control_Data/Control_data_analysis/centroid_speed")
#filename = "control_data_CVel_linear"
#filename = "RANDOMPOWER_CTRLOctober2013_data_CVel_feature"
#filename = "RANDOMPOWER_CTRLOctober2013_data_combined")
filename = "Control_data_CVel_sigtran"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
#mattest$I_ctrl and mattest$speedwlaser
#input
#names(mattest) : check content in mattest
#speed = mattest$combined
#speed = mattest$speed
speed = mattest$nfspeed
#speed = mattest$nfspeed.ctrl
# speed = mattest$speed
#speed[1:30,] = 0
I = t(mattest$I)
# #nonlinear map of I
# I <- rep(NA, length(mattest$fI))
# Imap =c(3.4718,74.1445,120.2700,133.8462,142.7821)
# for(i in 1:length(mattest$fI)) {
# 	if(mattest$fI[i]==10){I[i] = Imap[1]}
# 	if(mattest$fI[i]==30){I[i] = Imap[2]}
# 	if(mattest$fI[i]==60){I[i] = Imap[3]}
# 	if(mattest$fI[i]==100){I[i] = Imap[4]}
# 	if(mattest$fI[i]==150){I[i] = Imap[5]}
# }
###LASSO
#fit0= glmnet(t(speed), t(I))
#range
lambdafit1 = seq(log(2),log(1),length=50)
#lambdafit1 = seq(log(20),log(1),length=100)
lambdafit1 = exp(lambdafit1)
#fit1 = glmnet(t(speed), t(I),lambda=lambdafit1)
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
#fit2 = cv.glmnet(t(speed), t(I),lambda=lambdafit1)
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
#plot(fit2$nzero,r2cv)
#plot(fit1$beta[,50])
#plot(r2cv)
#plot(fit2$cvm)
###output Rsquare plots
windows()
plot(fit2$nzero,r2cv,col="red",xlab="no. of nonzero",ylab='Rsquare',ylim=c(0,1))
title('Rsquare')
xlab='Rsquare'
### find the maximum value of Rsquare
windows()
plot(fit1$beta[,which.max(r2cv)],xlab='time')
title(r2cv[which.max(r2cv)],  sub = fit2$nzero[which.max(r2cv)],
cex.sub = 0.75, font.sub = 3, col.sub = "red")
#Make speedion using predict.cv
predict_I = predict(fit2,newx=t(speed),s=fit2$lambda[70])
windows()
plot(predict_I,I)
#saving data
writeMat(paste(filename,"_LASSO",".mat",sep=""),r2cv=r2cv, LASSOresult=fit1$beta, nzero=fit1$df,a0 = fit1$a0,predict_I=predict_I, intput_I = I)
library("R.matlab")
rm(list = ls())
setwd("D:/Ilya/Control_Data/Control_data_analysis/centroid_speed")
#filename = "control_data_CVel_linear"
#filename = "RANDOMPOWER_CTRLOctober2013_data_CVel_feature"
#filename = "RANDOMPOWER_CTRLOctober2013_data_combined")
filename = "Control_data_CVel_sigtran"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
#mattest$I_ctrl and mattest$speedwlaser
#input
#names(mattest) : check content in mattest
#speed = mattest$combined
#speed = mattest$speed
speed = mattest$nfspeed
#speed = mattest$nfspeed.ctrl
# speed = mattest$speed
#speed[1:30,] = 0
I = t(mattest$I)
###LASSO
#fit0= glmnet(t(speed), t(I))
#range
lambdafit1 = seq(log(2),log(1),length=50)
#lambdafit1 = seq(log(20),log(1),length=100)
lambdafit1 = exp(lambdafit1)
#fit1 = glmnet(t(speed), t(I),lambda=lambdafit1)
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
#fit2 = cv.glmnet(t(speed), t(I),lambda=lambdafit1)
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
#plot(fit2$nzero,r2cv)
#plot(fit1$beta[,50])
#plot(r2cv)
#plot(fit2$cvm)
library("R.matlab")
rm(list = ls())
setwd("D:/Ilya/Control_Data/Control_data_analysis/centroid_speed")
#filename = "control_data_CVel_linear"
#filename = "RANDOMPOWER_CTRLOctober2013_data_CVel_feature"
#filename = "RANDOMPOWER_CTRLOctober2013_data_combined")
filename = "Control_data_CVel_sigtran"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
library("R.matlab")
library("glmnet")
rm(list = ls())
setwd("D:/Ilya/Control_Data/Control_data_analysis/centroid_speed")
#filename = "control_data_CVel_linear"
#filename = "RANDOMPOWER_CTRLOctober2013_data_CVel_feature"
#filename = "RANDOMPOWER_CTRLOctober2013_data_combined")
filename = "Control_data_CVel_sigtran"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
#mattest$I_ctrl and mattest$speedwlaser
#input
#names(mattest) : check content in mattest
#speed = mattest$combined
#speed = mattest$speed
speed = mattest$nfspeed
#speed = mattest$nfspeed.ctrl
# speed = mattest$speed
#speed[1:30,] = 0
I = t(mattest$I)
# #nonlinear map of I
# I <- rep(NA, length(mattest$fI))
# Imap =c(3.4718,74.1445,120.2700,133.8462,142.7821)
# for(i in 1:length(mattest$fI)) {
# 	if(mattest$fI[i]==10){I[i] = Imap[1]}
# 	if(mattest$fI[i]==30){I[i] = Imap[2]}
# 	if(mattest$fI[i]==60){I[i] = Imap[3]}
# 	if(mattest$fI[i]==100){I[i] = Imap[4]}
# 	if(mattest$fI[i]==150){I[i] = Imap[5]}
# }
###LASSO
#fit0= glmnet(t(speed), t(I))
#range
lambdafit1 = seq(log(2),log(1),length=50)
#lambdafit1 = seq(log(20),log(1),length=100)
lambdafit1 = exp(lambdafit1)
#fit1 = glmnet(t(speed), t(I),lambda=lambdafit1)
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
#fit2 = cv.glmnet(t(speed), t(I),lambda=lambdafit1)
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
#plot(fit2$nzero,r2cv)
#plot(fit1$beta[,50])
#plot(r2cv)
#plot(fit2$cvm)
###output Rsquare plots
windows()
plot(fit2$nzero,r2cv,col="red",xlab="no. of nonzero",ylab='Rsquare',ylim=c(0,1))
title('Rsquare')
xlab='Rsquare'
### find the maximum value of Rsquare
windows()
plot(fit1$beta[,which.max(r2cv)],xlab='time')
title(r2cv[which.max(r2cv)],  sub = fit2$nzero[which.max(r2cv)],
cex.sub = 0.75, font.sub = 3, col.sub = "red")
#Make speedion using predict.cv
predict_I = predict(fit2,newx=t(speed),s=fit2$lambda[70])
windows()
plot(predict_I,I)
#saving data
writeMat(paste(filename,"_LASSO",".mat",sep=""),r2cv=r2cv, LASSOresult=fit1$beta, nzero=fit1$df,a0 = fit1$a0,predict_I=predict_I, intput_I = I)
library("R.matlab")
library("glmnet")
rm(list = ls())
setwd("D:/Ilya/Control_Data/Control_data_analysis/centroid_speed")
#filename = "control_data_CVel_linear"
#filename = "RANDOMPOWER_CTRLOctober2013_data_CVel_feature"
#filename = "RANDOMPOWER_CTRLOctober2013_data_combined")
filename = "Control_data_CVel_sigtran"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
#mattest$I_ctrl and mattest$speedwlaser
#input
#names(mattest) : check content in mattest
#speed = mattest$combined
#speed = mattest$speed
speed = mattest$nfspeed
#speed = mattest$nfspeed.ctrl
# speed = mattest$speed
#speed[1:30,] = 0
I = t(mattest$I)
###LASSO
#fit0= glmnet(t(speed), t(I))
#range
lambdafit1 = seq(log(2),log(1),length=50)
#lambdafit1 = seq(log(20),log(1),length=100)
lambdafit1 = exp(lambdafit1)
#fit1 = glmnet(t(speed), t(I),lambda=lambdafit1)
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
#fit2 = cv.glmnet(t(speed), t(I),lambda=lambdafit1)
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
#plot(fit2$nzero,r2cv)
#plot(fit1$beta[,50])
#plot(r2cv)
#plot(fit2$cvm)
###LASSO
#fit0= glmnet(t(speed), t(I))
#range
lambdafit1 = seq(log(2),log(1),length=50)
#lambdafit1 = seq(log(20),log(1),length=100)
lambdafit1 = exp(lambdafit1)
#fit1 = glmnet(t(speed), t(I),lambda=lambdafit1)
fit1 = glmnet(t(speed), t(I))
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
fit2$cvm
var(I)
var(t(I)
var(t(I))
var(t(I))
rm(list = ls())
library("R.matlab")
library("glmnet")
setwd("D:/Ilya/Control_Data/Control_data_analysis/centroid_speed")
#filename = "control_data_CVel_linear"
#filename = "RANDOMPOWER_CTRLOctober2013_data_CVel_feature"
#filename = "RANDOMPOWER_CTRLOctober2013_data_combined")
filename = "Control_data_CVel_sigtran"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
#mattest$I_ctrl and mattest$speedwlaser
#input
#names(mattest) : check content in mattest
#speed = mattest$combined
#speed = mattest$speed
speed = mattest$nfspeed
#speed = mattest$nfspeed.ctrl
# speed = mattest$speed
#speed[1:30,] = 0
I = t(mattest$I)
# #nonlinear map of I
# I <- rep(NA, length(mattest$fI))
# Imap =c(3.4718,74.1445,120.2700,133.8462,142.7821)
# for(i in 1:length(mattest$fI)) {
# 	if(mattest$fI[i]==10){I[i] = Imap[1]}
# 	if(mattest$fI[i]==30){I[i] = Imap[2]}
# 	if(mattest$fI[i]==60){I[i] = Imap[3]}
# 	if(mattest$fI[i]==100){I[i] = Imap[4]}
# 	if(mattest$fI[i]==150){I[i] = Imap[5]}
# }
###LASSO
#fit0= glmnet(t(speed), t(I))
#range
lambdafit1 = seq(log(2),log(1),length=50)
#lambdafit1 = seq(log(20),log(1),length=100)
lambdafit1 = exp(lambdafit1)
#fit1 = glmnet(t(speed), t(I),lambda=lambdafit1)
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
#fit2 = cv.glmnet(t(speed), t(I),lambda=lambdafit1)
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
#plot(fit2$nzero,r2cv)
#plot(fit1$beta[,50])
#plot(r2cv)
#plot(fit2$cvm)
###output Rsquare plots
windows()
plot(fit2$nzero,r2cv,col="red",xlab="no. of nonzero",ylab='Rsquare',ylim=c(0,1))
title('Rsquare')
xlab='Rsquare'
### find the maximum value of Rsquare
windows()
plot(fit1$beta[,which.max(r2cv)],xlab='time')
title(r2cv[which.max(r2cv)],  sub = fit2$nzero[which.max(r2cv)],
cex.sub = 0.75, font.sub = 3, col.sub = "red")
#Make speedion using predict.cv
predict_I = predict(fit2,newx=t(speed),s=fit2$lambda[70])
windows()
plot(predict_I,I)
#saving data
writeMat(paste(filename,"_LASSO",".mat",sep=""),r2cv=r2cv, LASSOresult=fit1$beta, nzero=fit1$df,a0 = fit1$a0,predict_I=predict_I, intput_I = I)
rm(list = ls())
library("R.matlab")
library("glmnet")
setwd("D:/Dropbox/GitHub/C.-elegans/Worm_pain_model/Data_analysis/Sigmoid_Optmiziation_LASSO")
#Read the data
filename = "temp"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
speed = mattest$nfspeed
I = t(mattest$tranI)
###LASSO
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
rm(list = ls())
library("R.matlab")
library("glmnet")
setwd("D:/Dropbox/GitHub/C.-elegans/Worm_pain_model/Data_analysis/Sigmoid_Optmiziation_LASSO")
#Read the data
filename = "temp"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
speed = mattest$nfspeed
I = t(mattest$tranI)
###LASSO
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
###output Rsquare plots
windows()
plot(fit2$nzero,r2cv,col="red",xlab="no. of nonzero",ylab='Rsquare',ylim=c(0,1))
title('Rsquare')
xlab='Rsquare'
### find the maximum value of Rsquare
windows()
plot(fit1$beta[,which.max(r2cv)],xlab='time')
title(r2cv[which.max(r2cv)],  sub = fit2$nzero[which.max(r2cv)],
cex.sub = 0.75, font.sub = 3, col.sub = "red")
#Make speedion using predict.cv
predict_I = predict(fit2,newx=t(speed),s=fit2$lambda[70])
windows()
plot(predict_I,I)
#saving data
writeMat(paste("temp2",".mat",sep=""),r2cv=r2cv, LASSOresult=fit1$beta, nzero=fit1$df,a0 = fit1$a0,predict_I=predict_I, intput_I = I)
fit1
fit1$nz
fit1$nzero
fix(fit1)
fix(fit1)
fix(fit2)
fit1$df
fit2$df
fix(fit2)
fit1$lambda
fit2$lambda
rm(list = ls())
library("R.matlab")
library("glmnet")
setwd("D:/Dropbox/GitHub/C.-elegans/Worm_pain_model/Data_analysis/Sigmoid_Optmiziation_LASSO")
#Read the data
filename = "temp"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
speed = mattest$nfspeed
I = t(mattest$tranI)
###LASSO
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
#saving data
writeMat(paste("temp2",".mat",sep=""),r2cv=r2cv, beta=fit1$beta, nzero=fit1$df,a0 = fit1$a0,input_I = I,input_nfspeed = nfspeed)
require(doMC)
registerDoMC(cores=4)
lambda
fit1$lambda
lambda = fit1$lambda
fix(lambda)
fix(lambda)
fit1$df
library(doMC)
install.packages("DoMC")
install.packages("doMC")
install.packages("D:/Dropbox/GitHub/doMC_1.3.2.tar.gz", repos = NULL, type = "source")
install.packages(c("R.matlab", "R.methodsS3", "R.oo"))
install.packages("D:/Dropbox/GitHub/doMC_1.3.2.tar.gz", repos = NULL, type = "source")
registerDoMC()
library("doMC")
rm(list = ls())
library("R.matlab")
library("glmnet")
setwd("D:/Dropbox/GitHub/C.-elegans/Worm_pain_model/Data_analysis/Sigmoid_Optmiziation_LASSO")
#Read the data
filename = "temp"
mattest <- readMat(file.path(paste(filename,".mat",sep="")))
speed = mattest$nfspeed
I = t(mattest$tranI)
###LASSO
fit1 = glmnet(t(speed), t(I))
####Cross-validation LASSO
fit2 = cv.glmnet(t(speed), t(I))
r2cv= 1- (fit2$cvm/var(I))
#saving data
writeMat(paste("temp2",".mat",sep=""),lambda1=fit1$lambda,lambda2=fit2$lambda,r2cv=r2cv, beta=fit1$beta, nzero=fit1$df,a0 = fit1$a0,input_I = I,input_nfspeed = speed)
