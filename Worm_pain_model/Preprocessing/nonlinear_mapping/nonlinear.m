

function []=nonlinear(speeddatapath, datafilename,maxspeeddatapath,maxspeedfilename)
% function []=nonlinear(speeddatapath, datafilename,maxspeeddatapath,maxspeedfilename)
% 
% This function will generate a nonlinear transform model to laser power by fitting a
% exponential / log / smoothing spline curve to the maximum centroid speed verse laser power data. 
% 
% Input:
%  speeddatapath -- path to the file with the centroid velocity data
%  datafilename -- filename of the centroid velocity data file,
% 	extension '.mat' is assumed
%  maxspeeddatapath -- path to the file with the maximum centroid velocity
%  data generated by feature.m
%  maxspeedfilename -- filename of the maximum centroid velocity data file,
% 	extension '.mat' is assumed
% 
% Input file structure:
% centroid velocity data:
% 	fspeed (i,j) -- filtered centroid velocity at time i of trial j.
%   nfspeed (i,j) -- filtered and normalized centroid veloctiy at time i of trial j.
%   I(i) -- laser power of worm i.
% maximum centroid velocity data:
%   featuredata.avgmaxspeed(k) -- average maximum backward velocity of group k.
%   featuredata.I_avgmaxspeed(k) -- laser power of group k.
% 
% Output:
%  no output variables
% 
% Output File:
% Transformed laser power data will be stored with centroid speed data in
% the path specified by 'speeddatapath'.
% 
% Output file structure:
% 	fspeed (i,j) -- filtered centroid velocity at time i of trial j.
%   nfspeed (i,j) -- filtered and normalized centroid veloctiy at time i of trial j.
%   I(i) -- Transformed laser power of worm i.
% 
% 
% (c) George Leung, Ilya Nemenman, Emory University, 2011-2013

%load data
load([speeddatapath '/' datafilename '.mat'])
load([maxspeeddatapath '/' maxspeedfilename '.mat'])


%rescaling of the maximum speed such that the range of laser power are roughly the
%same
inputx = featuredata.I;
inputy = (max(featuredata.I))/(max(featuredata.maxspeed))*featuredata.maxspeed;




% % log fitting method
[fitresult, gof] = logFit(inputx, inputy);
ylabel('Transformed Laser power')
xlabel('Original Laser power')
title('log fit')
%transform the laser power
I= fitresult(featuredata.I)';
%saving data to the same folder 
save([speeddatapath '\' datafilename '_nonlinearlog.mat'], 'I','fspeed','nfspeed')
save([speeddatapath '\' 'nonlinearlog.mat'], 'fitresult')



%%exp2 fitting method
fitresult = fit(inputx', inputy',  'exp2');
figure()
plot(inputx', inputy','.')
hold
plot(fitresult)
title('exp2 fit')
%transform the laser power
I= fitresult(featuredata.I)';
%saving data to the same folder 
save([speeddatapath '\' datafilename '_nonlinearexp.mat'], 'I','fspeed','nfspeed')
save([speeddatapath '\' 'nonlinearexp.mat'], 'fitresult')


%%smoothing spline fitting method
[fitresult, gof] = smoothingspline(inputx, inputy, 0.3);
ylabel('Transformed Laser power')
xlabel('Original Laser power')
title('spline fit')
%transform the laser power
I= fitresult(featuredata.I)';
%saving data to the same folder 
save([speeddatapath '\' datafilename '_nonlinearsp.mat'], 'I','fspeed','nfspeed')
save([speeddatapath '\' 'nonlinearsp.mat'], 'fitresult')

%linear
I= featuredata.I;
save([speeddatapath '\' datafilename '_linear.mat'], 'I','fspeed','nfspeed')

%log
I = log(featuredata.I);
save([speeddatapath '\' datafilename '_logI.mat'], 'I','fspeed','nfspeed')




% %delete data that never move backwards
% fspeed(:,find(isnan(featuredata.rtime))) = [];
% nfspeed(:,find(isnan(featuredata.rtime))) = [];
% I(:,find(isnan(featuredata.rtime))) = [];
end






